services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
    ports:
      - 2181:2181
    networks:
      - network

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    container_name: kafka
    hostname: kafka
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092, PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 10000
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    ports:
      - 9092:9092
    healthcheck:
      test: |
        bash -c "
        kafka-broker-api-versions --bootstrap-server localhost:9092 && 
        kafka-topics --bootstrap-server localhost:9092 --list
        "
      interval: 30s
      timeout: 20s
      retries: 20
      start_period: 40s
    networks:
      - network

  text_analyzer_service:
    build:
      context: ./text_analyzer_service
      dockerfile: Dockerfile
    container_name: text_analyzer_service
    environment:
      APP_ENV: ${APP_ENV:-dev}
      CONFIG_PATH: /app/config/config-local.yaml
      KAFKA_BROKERS: kafka:9092
      KAFKA_INPUT_TOPIC: content.text
      KAFKA_RESULT_TOPIC: content.text.results
      KAFKA_ERROR_TOPIC: content.dead_letter
      KAFKA_GROUP_ID: text_analyzer_group
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - network
    restart: unless-stopped
    volumes:
      - ./text_analyzer_service/config:/app/config:ro


  nsfw:
    build:
      context: nsfw_service
      dockerfile: ./Dockerfile
    container_name: nsfw_service
    restart: unless-stopped
    depends_on:
      - kafka
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - network

      
  api_gateway:
    build:
      context: ./api_gateway
      dockerfile: Dockerfile
    container_name: api_gateway
    ports:
      - "8080:8080"
    depends_on:
      auth_service:
        condition: service_started
      storage_service:
        condition: service_started
    restart: unless-stopped
    networks:
      - network
    volumes:
      - ./api_gateway/config:/app/config:ro
    environment:
      CONFIG_PATH: /app/config/config-local.yaml

  auth_service:
    build:
      context: ./auth_service
      dockerfile: Dockerfile
    container_name: auth_service
    ports:
      - "50051:50051"
    environment:
      DB_URL: postgres://admin:password@auth_db:5432/users?sslmode=disable
      SECRET_KEY: your_very_secure_secret_key_here
      CONFIG_PATH: /app/config/config-local.yaml
    depends_on:
      migrator:
        condition: service_completed_successfully
      auth_db:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - ./auth_service/config:/app/config
    networks:
      - network

  auth_db:
    image: postgres:15-alpine
    container_name: auth_db
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      POSTGRES_DB: users
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: "pg_isready -d $$POSTGRES_DB -U $$POSTGRES_USER"
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - network

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - ./redisdata:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 3
    restart: unless-stopped
    networks:
      - network

  minio:
    image: minio/minio:latest
    container_name: minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
      MINIO_DOMAIN: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ./miniodata:/data
#    user: "1001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - network

  storage_service:
    build:
      context: ./storage_service
      dockerfile: Dockerfile
    container_name: storage_service
    ports:
      - "50052:50052"
    environment:
      DB_URL: "postgres://admin:password@storage_db:5432/storage?sslmode=disable"
      CONFIG_PATH: /app/config/config-local.yaml
    depends_on:
      redis:
        condition: service_healthy
      storage_db:
        condition: service_healthy
      kafka:
        condition: service_healthy
      minio:
        condition: service_healthy
      migrator_storage:
        condition: service_completed_successfully
    restart: unless-stopped
    volumes:
      - ./storage_service/config:/app/config
    networks:
      - network

  storage_db:
    image: postgres:15-alpine
    container_name: storage_db
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      POSTGRES_DB: storage
      DB_URL: "postgres://admin:password@storage_db:5431/storage?sslmode=disable"
    ports:
      - "5431:5432"
    healthcheck:
      test: "pg_isready -d $$POSTGRES_DB -U $$POSTGRES_USER"
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - network

  migrator_storage:
    build:
      context: storage_service
      dockerfile: cmd/migrator/Dockerfile
    environment:
      DB_URL: "postgres://admin:password@storage_db:5432/storage?sslmode=disable"
      CONFIG_PATH: /app/config/config-local.yaml
    depends_on:
      storage_db:
        condition: service_healthy
    volumes:
      - ./storage_service/migrations:/app/migrations
    networks:
      - network


  migrator:
    build:
      context: auth_service
      dockerfile: cmd/migrator/Dockerfile
    environment:
      DB_URL: "postgres://admin:password@auth_db:5432/users?sslmode=disable"
      SECRET_KEY: your_very_secure_secret_key_here
      CONFIG_PATH: /app/config/config-local.yaml
    depends_on:
      auth_db:
        condition: service_healthy
    volumes:
      - ./auth_service/migrations:/app/migrations
    networks:
      - network

volumes:
  postgres_data:

networks:
  network:
    driver: bridge